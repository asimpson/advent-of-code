http://adventofcode.com/2017/day/1

* IRC Feedback to solution
#+BEGIN_QUOTE
<CognitiveRadiation> asimpson: there's nothign wrong with calling .iter()
                 multiple times
<CognitiveRadiation> asimpson: although now that I look more closely, you're
                 calling .collect() on an interator
<CognitiveRadiation> and then calling .iter() on it after it's been collected
<CognitiveRadiation> which is probably unnecessary
<sarnold> asimpson: putting an .iter() inside a .fold() like that feels a bit
          like you're going to get a quadratic runtime out of the
          solution. that's not hte worst thing in the world if the inputs are
          always ~ten chars :) but I think you're right, there's probably
          something simpler                                             [14:54]
<asimpson> sarnold: yeah it felt weird, but I needed to refer to a point in
           the list I'm folding on.
<aghast> asimpson: You cloned s. So your closure could just check s[i + half]
<aghast> (well, %n)                                                     [14:57]
<asimpson> aghast: ah ok
<sarnold> aghast: hah, ten points for spotting the easier solution :D
#+END_QUOTE

* Misc notes
https://www.reddit.com/r/rust/comments/8aw450/hey_rustaceans_got_an_easy_question_ask_here/dx2j421/?context=0
Also, you probably shouldn't use Iterator::nth if you can avoid it. It can be implemented as a literal "do n steps, one at a time". Sometimes it is efficient, but don't assume that.

Also also, you can't re-use iterators like that. Iterator combinators consume the iterator they're called on. If you want to use an iterator more than once, you need to either re-create it each time, or clone it from a saved checkpoint, assuming the iterator supports cloning.
